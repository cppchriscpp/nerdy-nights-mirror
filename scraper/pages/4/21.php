<div class="mdl-card__title"><strong>removed04092017</strong> posted on 
		
			
				
				Feb 24, 2011 at 10:48:03 PM 
			
			
			
			
		
	</div><div class="mdl-card__supporting-text">
					<pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; ">  LDA #$00<br>  STA $2003  ; set the low byte (00) of the RAM address<br>  LDA #$02<br>  STA $4014  ; set the high byte (02) of the RAM address, start the transfer</pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; "><br></pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; ">That piece of code tells the PPU&apos;s internal sprite RAM to point to the first sprite RAM spot (#$00) to start uploading sprites. $02 tells it to put the sprites from $200-$2FF inside the NES to that memory. (Called sprite DMA. Uploads faster then a LDA STA loop which is why we use the special pointer. Can also point to $300, $400, and so on. Uploading bytes $X00-$XFF to the sprite RAM, but $200 is used consistently for sprite data, so that&apos;s why it&apos;s used. Pretty much a &quot;standard&quot; spot.)</pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; "><br></pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; "><br></pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; ">So locations $200-$2FF of the RAM inside the NES holds 64 sprites. 256/64=4, so every 4 bytes is a new sprite. The 4 bytes used for the sprite data are called the attributes.</pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; ">Byte $200 (1st sprite, 1st attribute)</pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; ">Y position on screen. Moves the sprite up/down. 0=top, Higher number, more down is goes.</pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; "><br></pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; ">Byte $201 (1st sprite, 2nd attribute)</pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; ">Tile number. whatever bank is switched on, the tile number from that bank will be put on the screen. In most programs, the 2nd 4K &quot;page&quot; of CHR-ROM are the sprites.</pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; "><br></pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; ">Byte $202 (1st sprite, 3rd attribute)</pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; ">Other misc. attributes. Each bit does this function in this byte:</pre><pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; white-space: normal; "><pre>  76543210<br>  |||   ||<br>  |||   ++- Color Palette of sprite.  Choose which set of 4 from the 16 colors to use<br>  |||<br>  ||+------ Priority (0: in front of background; 1: behind background)<br>  |+------- Flip sprite horizontally<br>  +-------- Flip sprite vertically</pre></pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; white-space: normal; "><br></pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; white-space: normal; ">Byte $203 (1st sprite, 4th attribute)</pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; white-space: normal; ">X position on the screen. Moves player character left/right. 0=far left. Higher the number, more right it goes.</pre><pre style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 11px; white-space: normal; "><br></pre><pre><span class="Apple-style-span" style="font-size: 11px; ">Bytes $204-$207, $208-$20B, $20C-$20F, $210-$213 of Sprite RAM are different sprites, but each follows the same attributes. For unused sprites, just write #$FF to the Y locaion and they will be put off the screen. If you write #$FF to the X, It may cause sprite overflow on some scanlines and cause sprites not to show up. (There can only be 8 sprites per scanline. Any sprite after the first 8 will be left out. The ones that come first in RAM will be shown on top/in priority to other sprites if there&apos;s overflow/overlap.)</span></pre><pre><span class="Apple-style-span" style="font-size: 11px; "><br></span></pre><pre><span class="Apple-style-span" style="font-size: 11px; ">Hope this helps you understand, I simplified it a lot for the sake of making it easier to understand, but if you get this, understanding the technicalities behind it isn&apos;t so hard. Any questions, just PM me.</span></pre></pre>
				</div><div class="mdl-card--border"></div>