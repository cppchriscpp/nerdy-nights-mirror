
					<p>INTRO</p><p>I had a request for MMC1 mapper information, so I thought everyone might like to read what I have to say.</p><p>This will help you figure out MMC1 memory mapping.&#xA0; It assumes that you have a working knowledge <br>of NES programming and can understand my messed up little mind. Most of the information on this<br>mapper can be found on:</p><p><a href="http://wiki.nesdev.com/w/index.php/MMC1" target="_blank" original-href="http://wiki.nesdev.com/w/index.php/MMC1">http://wiki.nesdev.com/w/index.php/MMC1</a></p><p>MMC1 will allow you to use up to 256 kB of PRG ROM and 128 kB of CHR ROM.&#xA0; I think that you can use SUROM to expand up to 4 MB of PRG ROM, but this is not covered here.</p><p><br>First, you have to decide on what kind of configuration you want to use.&#xA0; MMC1 will support PRG bank<br>switching in either 16kB mode or 32kB mode.&#xA0; And with the 16, you can choose whether you want <br>the memory at $C000 or the memory at $8000 to be switched.&#xA0; </p><p>Second, you have to decide on the CHR ROM switching.&#xA0; MMC1 supports switching of 4kB (background or sprite tiles separately) or 8kB (switching them together).</p><p><br>After you decide this, you are ready to start.</p><p><br>INES HEADER</p><p>Notes:</p><p>-You can only have even numbers of PRG banks.&#xA0; NESASM uses 8kB &quot;banks&quot;, I&apos;m talking about 16kB banks.&#xA0; <br>i.e. 02 (32kB),04 (64kB),06 (96kB),08 (128kB),0A (160kB),0C (192kB),0E (224kB),10 (256kB)</p><p>-CHR banks are in multiples of 8kB banks. (important if you are using 4kB swapping.)<br>i.e. 01 (8kB),02 (16kB),03 (24kB),04 (32kB),05 (40kB), 06 (48kB), etc., 10 (128kB)</p><p>-MMC1 mapper number is &quot;1&quot; ...creative!</p><p>-Mirroring should match that used below in the initiation routine.</p><p>In this exercise, we will use:</p><p>&#xA0; .inesprg $10&#xA0;&#xA0; ; 16x 16KB PRG code<br>&#xA0; .ineschr $10&#xA0;&#xA0; ; 16x&#xA0; 8KB CHR data<br>&#xA0; .inesmap $01&#xA0;&#xA0; ; mapper 1 = MMC1, 4KB CHR bank swapping<br>&#xA0; .inesmir 0&#xA0;&#xA0; ; background mirroring</p><p><br>MAPPER CONTROL HEADER</p><p>This is one bite that has all the information for the mapper.&#xA0; Observe:</p><p>76543210</p><p>Bits 7,6,5 - Not sure what these do.<br>Bit 4 - CHR ROM bank mode - (0 means switch 8kB at a time, 1 means switch the two separate 4kB banks independently)<br>Bit 3 - PRG ROM bank mode - (0 means switch all 32kB at once, ignores bit 2)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; (1 means switch ONLY the 16kB specified in bit 2)<br>Bit 2 - PRG ROM location - (0 means switch 16kB at $C000, 1 means switch 16kB at $8000)<br>Bits 1,0 - Mirroring - (0 means one screen, lower bank; 1 means one screen, upper bank<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 2 means vertical; 3 means horizontal)</p><p>Here we will use LDX #%00011000 </p><p>BITCH WORK!&#xA0; Look above and figure out what this means.</p><p><br>INITIATE MAPPER</p><p>Here we load the information required by the system to run the mapper as well as the initial banks.<br>You have to do the 5 writes to make it work...for whatever reason.</p><p>initMMC1Mapper:<br>&#xA0; LDA #$80&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ;this locks the PRG ROM at $C000-$FFFF to the last bank.<br>&#xA0; STA $8000<br>&#xA0;<br>&#xA0; TXA&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ;uses our header to initiate the mapper<br>&#xA0; JSR setMMC1ControlMode<br>&#xA0;<br>&#xA0; LDA #$02&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ;sets the CHR information for the sprites<br>&#xA0; JSR setCHRPage0000<br>&#xA0;<br>&#xA0; LDA #$01&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ;sets the CHR information for the background<br>&#xA0; JSR setCHRPage1000<br>&#xA0;<br>&#xA0; LDA #$03&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ;sets the PRG information<br>&#xA0; JSR setPRGBank<br>&#xA0;<br>&#xA0; RTS<br>&#xA0;<br>setMMC1ControlMode:<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $8000 <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $8000 <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $8000 <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $8000 <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $8000 <br>&#xA0; RTS<br>&#xA0;<br>setCHRPage0000:<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $A000<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $A000<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $A000<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $A000<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $A000&#xA0; <br>&#xA0; RTS</p><p>setCHRPage1000:<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $C000<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $C000<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $C000<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $C000<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $C000 <br>&#xA0; RTS <br>&#xA0;<br>setPRGBank:<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $E000 <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $E000 <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $E000 <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $E000 <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; LSR A <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; STA $E000 <br>&#xA0; RTS</p><p>Congrats....your program should work.</p><p>USING THE MAPPER</p><p>You can swap out banks whenever you want, even several times per NMI.&#xA0; Just load the bank number you want to<br>use into A and call the appropriate subroutine.&#xA0; Just be sure that you don&apos;t switch away information that<br>your program needs to run or it will die.</p><p>Weird bank numbering notes:</p><p>-CHR data is stored in 8kB for NESASM.&#xA0; If you want to call the first 4kB of data from the 6th 8kB chunk,<br>you would use bank #$0C.&#xA0; Observe, call number for 4kB chunk vs. 8kB bank number:</p><p>00-0<br>01-0<br>02-1<br>03-1<br>04-2<br>05-2<br>06-3<br>07-3<br>08-4<br>09-4<br>0A-5<br>0B-5<br>0C-6<br>0D-6<br>0E-7<br>0F-7<br>10-8<br>11-8<br>12-9<br>13-9<br>14-10<br>15-10<br>16-11<br>17-11<br>18-12<br>19-12<br>1A-13<br>1B-13<br>1C-14<br>1D-14<br>1E-15<br>1F-15</p><p>Clear?</p><p>-PRG info is stored in 8kB chunks in NESASM, but you call and switch 16kB banks.&#xA0; If you want to call bank 26, use call number #$0D.&#xA0; Observe, call number vs. bank number:</p><p>0-0,1<br>1-2,3<br>2-4,5<br>3-6,7<br>4-8,9<br>5-10,11<br>6-12,13<br>7-14,15<br>8-16,17<br>9-18,19<br>A-20,21<br>B-22,23<br>C-24,25<br>D-26,27<br>E-28,29<br>F-30,31</p><p>Clear?</p><p>-At the end of each 16kB bank, you have to have vectors in place or it will die.</p><p>&#xA0; .org $FFFA&#xA0;&#xA0;&#xA0;&#xA0; ;first of the three vectors starts here<br>&#xA0; .dw NMI&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &#xA0;;when an NMI happens (once per frame if enabled) the&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;;processor will jump to the label NMI:<br>&#xA0; .dw RESET&#xA0;&#xA0;&#xA0; ;when the processor first turns on or is reset, it will jump<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ;to the label RESET:<br>&#xA0; .dw 0&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ;external interrupt IRQ is not used in this tutorial</p><p>-Bank numbering is successive.&#xA0; i.e. if you have PRG banks numbered 0-23, you would start numbering your CHR banks at 24.</p><p>-If you have, for example, a 16kB CHR file, you only have to include the starting place and NESASM will <br>split the banks properly. i.e. in 4kB mode:</p><p>&#xA0; .bank 32<br>&#xA0; .org $0000<br>&#xA0; .incbin &quot;MMC1.chr&quot;&#xA0;&#xA0; ;includes 16KB graphics file </p><p>This will include 4 - 4kB (or 2-8kB) banks in the assembly process.&#xA0; Be sure to account for the 2 banks <br>in your numbering.&#xA0; (see the attached ASM file.)</p><p><br>PRACTIAL APPLICATION</p><p>This is a little inefficient.&#xA0; To use all this nonsense in something real, an example would be:</p><p>LoadBackground:</p><p>;find room info</p><p>;switch to room info table bank</p><p>;load bankground pointer</p><p>;switch to bank where background information is stored</p><p>;load background</p><p>;switch back to room info table bank</p><p>;load attribute and palette pointers</p><p>;switch to attribute/palette information bank</p><p>;load attributes/palettes</p><p>;switch back to room info table bank</p><p>;load collision detection pointer</p><p>;switch to collision detection bank</p><p>&#xA0; RTS</p><p><br>WORKING EXAMPLE</p><p>Here we use the controller to switch banks for both CHR banks and the PRG bank.</p><p>A and B - swap out CHR information for the sprites<br>Select and Start - nothing<br>Up and Down - load a background located in different banks (the flashing is cause you are holding the button<br>down for more than one frame.&#xA0; Just tap it.&#xA0; I was too lazy to add stuff in to fix this.)<br>Left and Right - swap out the CHR information for the backgrounds</p><p>Download the attached file and assemble the program.&#xA0; Mess around with it and try to switch out the <br>various buttons and banks.&#xA0; Fix the flashing.&#xA0; Add new backgrounds and characters...etc.</p><p>The little DOS assembler file might not work, you may have to edit it to your drive.</p><p><br>THE END!</p><p>I&apos;m sure I totally screwed this up, but don&apos;t worry!&#xA0; Someone will help me out if there are any mistakes.<br></p>
				<br><p><strong>Attachment:</strong> <a no-mirror href="scraper/files/MMC1.zip">MMC1.zip</a></p>